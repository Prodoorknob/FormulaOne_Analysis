{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "language": "python",
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.7.9",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "colab": {
      "name": "formula1-data-analysis-doorknob (1).ipynb",
      "provenance": [],
      "collapsed_sections": [
        "Wmb2r3crKwQn",
        "rvbpeHNWKwQn",
        "Qd3bqyORKwQv",
        "-VS1dhVlKwQv"
      ],
      "include_colab_link": true
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Prodoorknob/FormulaOne_Analysis/blob/main/F1_MultiModel\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:57.797716Z",
          "iopub.execute_input": "2021-07-06T18:04:57.798148Z",
          "iopub.status.idle": "2021-07-06T18:04:57.805115Z",
          "shell.execute_reply.started": "2021-07-06T18:04:57.798118Z",
          "shell.execute_reply": "2021-07-06T18:04:57.804123Z"
        },
        "trusted": true,
        "id": "VCzKhQDEKwPy"
      },
      "source": [
        "import pandas as pd \n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import re\n",
        "import datetime\n",
        "import seaborn as sns\n",
        "from sklearn.feature_selection import RFECV\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from sklearn.neural_network import MLPRegressor\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import precision_score\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.svm import SVR\n",
        "from sklearn import svm\n",
        "from sklearn.metrics import classification_report, confusion_matrix  \n",
        "from sklearn.model_selection import GridSearchCV"
      ],
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ESShEgTTBSTI",
        "outputId": "1763ca43-e6d3-4a64-97c3-b968e7c6863b"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:57.806748Z",
          "iopub.execute_input": "2021-07-06T18:04:57.807209Z",
          "iopub.status.idle": "2021-07-06T18:04:58.255315Z",
          "shell.execute_reply.started": "2021-07-06T18:04:57.807178Z",
          "shell.execute_reply": "2021-07-06T18:04:58.254424Z"
        },
        "trusted": true,
        "id": "JDctNonvKwP0"
      },
      "source": [
        "path='/content/drive/MyDrive/Colab Notebooks/F1/F1/'\n",
        "constructors_raw=pd.read_csv(path+\"constructors.csv\")\n",
        "constructors_st_raw=pd.read_csv(path+\"constructor_standings.csv\")\n",
        "constructors_res_raw=pd.read_csv(path+\"constructor_results.csv\")\n",
        "drivers_raw=pd.read_csv(path+\"drivers.csv\")\n",
        "driver_st_raw=pd.read_csv(path+\"driver_standings.csv\")\n",
        "results_raw=pd.read_csv(path+\"results.csv\")\n",
        "status=pd.read_csv(path+\"status.csv\")\n",
        "races_raw=pd.read_csv(path+\"races.csv\")\n",
        "pit_stops_raw=pd.read_csv(path+\"pit_stops.csv\")\n",
        "quali_raw=pd.read_csv(path+\"qualifying.csv\")\n",
        "lap_times_raw=pd.read_csv(path+\"lap_times.csv\")"
      ],
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.256783Z",
          "iopub.execute_input": "2021-07-06T18:04:58.257194Z",
          "iopub.status.idle": "2021-07-06T18:04:58.300611Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.257165Z",
          "shell.execute_reply": "2021-07-06T18:04:58.299699Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "gaD9Ik6QKwP2",
        "outputId": "f08f2bd1-580c-457d-9543-c1d0f859f053"
      },
      "source": [
        "races_raw=races_raw[races_raw[\"raceId\"]>=841]\n",
        "races_raw=races_raw.sort_values([\"raceId\"],ascending=True)\n",
        "results_raw=results_raw[results_raw[\"raceId\"]>=841]\n",
        "results_raw=results_raw.sort_values([\"raceId\"],ascending=True)\n",
        "races_raw_int=results_raw.merge(status,how='outer')\n",
        "races_raw_int.head()"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>resultId</th>\n",
              "      <th>raceId</th>\n",
              "      <th>driverId</th>\n",
              "      <th>constructorId</th>\n",
              "      <th>number</th>\n",
              "      <th>grid</th>\n",
              "      <th>position</th>\n",
              "      <th>positionText</th>\n",
              "      <th>positionOrder</th>\n",
              "      <th>points</th>\n",
              "      <th>laps</th>\n",
              "      <th>time</th>\n",
              "      <th>milliseconds</th>\n",
              "      <th>fastestLap</th>\n",
              "      <th>rank</th>\n",
              "      <th>fastestLapTime</th>\n",
              "      <th>fastestLapSpeed</th>\n",
              "      <th>statusId</th>\n",
              "      <th>status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>20779.0</td>\n",
              "      <td>841.0</td>\n",
              "      <td>20.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>1:29:30.259</td>\n",
              "      <td>5370259</td>\n",
              "      <td>44</td>\n",
              "      <td>4</td>\n",
              "      <td>1:29.844</td>\n",
              "      <td>212.488</td>\n",
              "      <td>1</td>\n",
              "      <td>Finished</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>20781.0</td>\n",
              "      <td>841.0</td>\n",
              "      <td>808.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>10</td>\n",
              "      <td>6.0</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>3.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>+30.560</td>\n",
              "      <td>5400819</td>\n",
              "      <td>55</td>\n",
              "      <td>7</td>\n",
              "      <td>1:30.064</td>\n",
              "      <td>211.969</td>\n",
              "      <td>1</td>\n",
              "      <td>Finished</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>20782.0</td>\n",
              "      <td>841.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>+31.772</td>\n",
              "      <td>5402031</td>\n",
              "      <td>49</td>\n",
              "      <td>2</td>\n",
              "      <td>1:29.487</td>\n",
              "      <td>213.336</td>\n",
              "      <td>1</td>\n",
              "      <td>Finished</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>20783.0</td>\n",
              "      <td>841.0</td>\n",
              "      <td>17.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>+38.171</td>\n",
              "      <td>5408430</td>\n",
              "      <td>50</td>\n",
              "      <td>3</td>\n",
              "      <td>1:29.600</td>\n",
              "      <td>213.066</td>\n",
              "      <td>1</td>\n",
              "      <td>Finished</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>20784.0</td>\n",
              "      <td>841.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4</td>\n",
              "      <td>4.0</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>6.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>+54.304</td>\n",
              "      <td>5424563</td>\n",
              "      <td>49</td>\n",
              "      <td>5</td>\n",
              "      <td>1:29.883</td>\n",
              "      <td>212.396</td>\n",
              "      <td>1</td>\n",
              "      <td>Finished</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   resultId  raceId  driverId  ...  fastestLapSpeed statusId    status\n",
              "0   20779.0   841.0      20.0  ...          212.488        1  Finished\n",
              "1   20781.0   841.0     808.0  ...          211.969        1  Finished\n",
              "2   20782.0   841.0       4.0  ...          213.336        1  Finished\n",
              "3   20783.0   841.0      17.0  ...          213.066        1  Finished\n",
              "4   20784.0   841.0      18.0  ...          212.396        1  Finished\n",
              "\n",
              "[5 rows x 19 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.301747Z",
          "iopub.execute_input": "2021-07-06T18:04:58.302192Z",
          "iopub.status.idle": "2021-07-06T18:04:58.321219Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.302153Z",
          "shell.execute_reply": "2021-07-06T18:04:58.320413Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HtLxBfh0KwP8",
        "outputId": "7e394871-cfed-493e-e922-5f70a248948f"
      },
      "source": [
        "results=races_raw.merge(races_raw_int,how='outer')\n",
        "results.columns"
      ],
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['raceId', 'year', 'round', 'circuitId', 'name', 'date', 'race_time',\n",
              "       'url', 'resultId', 'driverId', 'constructorId', 'number', 'grid',\n",
              "       'position', 'positionText', 'positionOrder', 'points', 'laps', 'time',\n",
              "       'milliseconds', 'fastestLap', 'rank', 'fastestLapTime',\n",
              "       'fastestLapSpeed', 'statusId', 'status'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.322198Z",
          "iopub.execute_input": "2021-07-06T18:04:58.322589Z",
          "iopub.status.idle": "2021-07-06T18:04:58.358840Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.322562Z",
          "shell.execute_reply": "2021-07-06T18:04:58.357941Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "id": "aC8WPX_PKwP-",
        "outputId": "deaf0205-18e2-4a4f-ac5f-b7da861e2a7c"
      },
      "source": [
        "results_drop=['url','resultId','positionText','statusId']\n",
        "results=results.drop(columns=results_drop,axis=1)\n",
        "results.head()"
      ],
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>raceId</th>\n",
              "      <th>year</th>\n",
              "      <th>round</th>\n",
              "      <th>circuitId</th>\n",
              "      <th>name</th>\n",
              "      <th>date</th>\n",
              "      <th>race_time</th>\n",
              "      <th>driverId</th>\n",
              "      <th>constructorId</th>\n",
              "      <th>number</th>\n",
              "      <th>grid</th>\n",
              "      <th>position</th>\n",
              "      <th>positionOrder</th>\n",
              "      <th>points</th>\n",
              "      <th>laps</th>\n",
              "      <th>time</th>\n",
              "      <th>milliseconds</th>\n",
              "      <th>fastestLap</th>\n",
              "      <th>rank</th>\n",
              "      <th>fastestLapTime</th>\n",
              "      <th>fastestLapSpeed</th>\n",
              "      <th>status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>841.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Australian Grand Prix</td>\n",
              "      <td>27-03-2011</td>\n",
              "      <td>06:00:00</td>\n",
              "      <td>20.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>1:29:30.259</td>\n",
              "      <td>5370259</td>\n",
              "      <td>44</td>\n",
              "      <td>4</td>\n",
              "      <td>1:29.844</td>\n",
              "      <td>212.488</td>\n",
              "      <td>Finished</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>841.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Australian Grand Prix</td>\n",
              "      <td>27-03-2011</td>\n",
              "      <td>06:00:00</td>\n",
              "      <td>808.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>10</td>\n",
              "      <td>6.0</td>\n",
              "      <td>3</td>\n",
              "      <td>3.0</td>\n",
              "      <td>15.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>+30.560</td>\n",
              "      <td>5400819</td>\n",
              "      <td>55</td>\n",
              "      <td>7</td>\n",
              "      <td>1:30.064</td>\n",
              "      <td>211.969</td>\n",
              "      <td>Finished</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>841.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Australian Grand Prix</td>\n",
              "      <td>27-03-2011</td>\n",
              "      <td>06:00:00</td>\n",
              "      <td>4.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4</td>\n",
              "      <td>4.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>+31.772</td>\n",
              "      <td>5402031</td>\n",
              "      <td>49</td>\n",
              "      <td>2</td>\n",
              "      <td>1:29.487</td>\n",
              "      <td>213.336</td>\n",
              "      <td>Finished</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>841.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Australian Grand Prix</td>\n",
              "      <td>27-03-2011</td>\n",
              "      <td>06:00:00</td>\n",
              "      <td>17.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>2</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>+38.171</td>\n",
              "      <td>5408430</td>\n",
              "      <td>50</td>\n",
              "      <td>3</td>\n",
              "      <td>1:29.600</td>\n",
              "      <td>213.066</td>\n",
              "      <td>Finished</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>841.0</td>\n",
              "      <td>2011.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Australian Grand Prix</td>\n",
              "      <td>27-03-2011</td>\n",
              "      <td>06:00:00</td>\n",
              "      <td>18.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4</td>\n",
              "      <td>4.0</td>\n",
              "      <td>6</td>\n",
              "      <td>6.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>58.0</td>\n",
              "      <td>+54.304</td>\n",
              "      <td>5424563</td>\n",
              "      <td>49</td>\n",
              "      <td>5</td>\n",
              "      <td>1:29.883</td>\n",
              "      <td>212.396</td>\n",
              "      <td>Finished</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   raceId    year  round  ...  fastestLapTime fastestLapSpeed    status\n",
              "0   841.0  2011.0    1.0  ...        1:29.844         212.488  Finished\n",
              "1   841.0  2011.0    1.0  ...        1:30.064         211.969  Finished\n",
              "2   841.0  2011.0    1.0  ...        1:29.487         213.336  Finished\n",
              "3   841.0  2011.0    1.0  ...        1:29.600         213.066  Finished\n",
              "4   841.0  2011.0    1.0  ...        1:29.883         212.396  Finished\n",
              "\n",
              "[5 rows x 22 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.361300Z",
          "iopub.execute_input": "2021-07-06T18:04:58.361790Z",
          "iopub.status.idle": "2021-07-06T18:04:58.375188Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.361745Z",
          "shell.execute_reply": "2021-07-06T18:04:58.374054Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "prXrYFh1KwQA",
        "outputId": "19554512-d896-4d20-abf2-2e4900b357fb"
      },
      "source": [
        "col=[\"driverRef\",\"number\",\"code\",\"url\"]\n",
        "drivers_raw=drivers_raw.drop(col,axis=1)\n",
        "drivers_raw['dob']=pd.to_datetime(drivers_raw['dob'])\n",
        "drivers_raw['Age']=2021-drivers_raw['dob'].dt.year\n",
        "drivers_raw=drivers_raw.drop(\"dob\",axis=1)\n",
        "drivers_raw.shape"
      ],
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(853, 5)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.377716Z",
          "iopub.execute_input": "2021-07-06T18:04:58.378179Z",
          "iopub.status.idle": "2021-07-06T18:04:58.405074Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.378147Z",
          "shell.execute_reply": "2021-07-06T18:04:58.403820Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "oYHvfkqvKwQU",
        "outputId": "ca217ed5-92de-4633-e0c7-bb511799cfc2"
      },
      "source": [
        "driver_st_raw=driver_st_raw[driver_st_raw[\"raceId\"]>=841]\n",
        "driver_st_raw=driver_st_raw.sort_values([\"raceId\",\"driverId\"],ascending=True)\n",
        "drop_columns=['positionText','driverStandingsId']\n",
        "driver_st_raw=driver_st_raw.drop(columns=drop_columns,axis=1)\n",
        "\n",
        "driver_st_raw.head()"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>driverId</th>\n",
              "      <th>raceId</th>\n",
              "      <th>points</th>\n",
              "      <th>position</th>\n",
              "      <th>wins</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>28439</th>\n",
              "      <td>1</td>\n",
              "      <td>841</td>\n",
              "      <td>18.0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28429</th>\n",
              "      <td>2</td>\n",
              "      <td>841</td>\n",
              "      <td>0.0</td>\n",
              "      <td>12</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28423</th>\n",
              "      <td>3</td>\n",
              "      <td>841</td>\n",
              "      <td>0.0</td>\n",
              "      <td>17</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28437</th>\n",
              "      <td>4</td>\n",
              "      <td>841</td>\n",
              "      <td>12.0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28422</th>\n",
              "      <td>5</td>\n",
              "      <td>841</td>\n",
              "      <td>0.0</td>\n",
              "      <td>18</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       driverId  raceId  points  position  wins\n",
              "28439         1     841    18.0         2     0\n",
              "28429         2     841     0.0        12     0\n",
              "28423         3     841     0.0        17     0\n",
              "28437         4     841    12.0         4     0\n",
              "28422         5     841     0.0        18     0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.407174Z",
          "iopub.execute_input": "2021-07-06T18:04:58.407612Z",
          "iopub.status.idle": "2021-07-06T18:04:58.437889Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.407566Z",
          "shell.execute_reply": "2021-07-06T18:04:58.436977Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 359
        },
        "id": "giIRH36tKwQX",
        "outputId": "6f857e83-0830-4d57-d388-8bda75da02da"
      },
      "source": [
        "driver_st_raw=driver_st_raw.rename({'points':'driver_points','position':'driver_position','wins':'driver_wins'},axis=1)\n",
        "driver_data=drivers_raw.merge(driver_st_raw,how='outer')\n",
        "driver_data.head(10)\n",
        "#driver_data.shape"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>driverId</th>\n",
              "      <th>forename</th>\n",
              "      <th>surname</th>\n",
              "      <th>nationality</th>\n",
              "      <th>Age</th>\n",
              "      <th>raceId</th>\n",
              "      <th>driver_points</th>\n",
              "      <th>driver_position</th>\n",
              "      <th>driver_wins</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Lewis</td>\n",
              "      <td>Hamilton</td>\n",
              "      <td>British</td>\n",
              "      <td>36</td>\n",
              "      <td>841.0</td>\n",
              "      <td>18.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>Lewis</td>\n",
              "      <td>Hamilton</td>\n",
              "      <td>British</td>\n",
              "      <td>36</td>\n",
              "      <td>842.0</td>\n",
              "      <td>22.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>Lewis</td>\n",
              "      <td>Hamilton</td>\n",
              "      <td>British</td>\n",
              "      <td>36</td>\n",
              "      <td>843.0</td>\n",
              "      <td>47.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>Lewis</td>\n",
              "      <td>Hamilton</td>\n",
              "      <td>British</td>\n",
              "      <td>36</td>\n",
              "      <td>844.0</td>\n",
              "      <td>59.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>Lewis</td>\n",
              "      <td>Hamilton</td>\n",
              "      <td>British</td>\n",
              "      <td>36</td>\n",
              "      <td>845.0</td>\n",
              "      <td>77.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>1</td>\n",
              "      <td>Lewis</td>\n",
              "      <td>Hamilton</td>\n",
              "      <td>British</td>\n",
              "      <td>36</td>\n",
              "      <td>846.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1</td>\n",
              "      <td>Lewis</td>\n",
              "      <td>Hamilton</td>\n",
              "      <td>British</td>\n",
              "      <td>36</td>\n",
              "      <td>847.0</td>\n",
              "      <td>85.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>1</td>\n",
              "      <td>Lewis</td>\n",
              "      <td>Hamilton</td>\n",
              "      <td>British</td>\n",
              "      <td>36</td>\n",
              "      <td>848.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1</td>\n",
              "      <td>Lewis</td>\n",
              "      <td>Hamilton</td>\n",
              "      <td>British</td>\n",
              "      <td>36</td>\n",
              "      <td>849.0</td>\n",
              "      <td>109.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>1</td>\n",
              "      <td>Lewis</td>\n",
              "      <td>Hamilton</td>\n",
              "      <td>British</td>\n",
              "      <td>36</td>\n",
              "      <td>850.0</td>\n",
              "      <td>134.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   driverId forename   surname  ... driver_points  driver_position  driver_wins\n",
              "0         1    Lewis  Hamilton  ...          18.0              2.0          0.0\n",
              "1         1    Lewis  Hamilton  ...          22.0              3.0          0.0\n",
              "2         1    Lewis  Hamilton  ...          47.0              2.0          1.0\n",
              "3         1    Lewis  Hamilton  ...          59.0              2.0          1.0\n",
              "4         1    Lewis  Hamilton  ...          77.0              2.0          1.0\n",
              "5         1    Lewis  Hamilton  ...          85.0              2.0          1.0\n",
              "6         1    Lewis  Hamilton  ...          85.0              4.0          1.0\n",
              "7         1    Lewis  Hamilton  ...          97.0              4.0          1.0\n",
              "8         1    Lewis  Hamilton  ...         109.0              4.0          1.0\n",
              "9         1    Lewis  Hamilton  ...         134.0              3.0          2.0\n",
              "\n",
              "[10 rows x 9 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.438933Z",
          "iopub.execute_input": "2021-07-06T18:04:58.439337Z",
          "iopub.status.idle": "2021-07-06T18:04:58.451985Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.439308Z",
          "shell.execute_reply": "2021-07-06T18:04:58.450936Z"
        },
        "trusted": true,
        "id": "NJhPOZjgKwQb"
      },
      "source": [
        "constructors_st_raw=constructors_st_raw[constructors_st_raw[\"raceId\"]>=841]\n",
        "constructors_res_raw=constructors_res_raw[constructors_res_raw[\"raceId\"]>=841]\n",
        "constructors_st_raw=constructors_st_raw.sort_values([\"raceId\"],ascending=True)\n",
        "constructors_res_raw=constructors_res_raw.sort_values([\"raceId\"],ascending=True)\n",
        "constructors_raw=constructors_raw.rename({'name':'Cons_name','nationality':'Cons_nationality','points':'Cons_points','position':'Cons_position','wins':'Cons_wins'},axis=1)\n",
        "constructors_st_raw=constructors_st_raw.rename({'name':'Cons_name','nationality':'Cons_nationality','points':'Cons_points','position':'Cons_position','wins':'Cons_wins'},axis=1)\n",
        "constructors_raw=constructors_raw.drop(columns=['constructorRef','url'],axis=1)"
      ],
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.453574Z",
          "iopub.execute_input": "2021-07-06T18:04:58.454021Z",
          "iopub.status.idle": "2021-07-06T18:04:58.478239Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.453865Z",
          "shell.execute_reply": "2021-07-06T18:04:58.477406Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lEf0DzUVKwQd",
        "outputId": "cdfc1b04-019d-43cf-e393-eda6315d0c13"
      },
      "source": [
        "constructors_data=constructors_raw.merge(constructors_st_raw,how='outer')\n",
        "c_d=[\"constructorStandingsId\",\"positionText\"]\n",
        "constructors_data=constructors_data.drop(columns=c_d,axis=1)\n",
        "print(constructors_data.head(10))"
      ],
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "   constructorId Cons_name  ... Cons_position  Cons_wins\n",
            "0              1   McLaren  ...           2.0        0.0\n",
            "1              1   McLaren  ...           2.0        0.0\n",
            "2              1   McLaren  ...           2.0        1.0\n",
            "3              1   McLaren  ...           2.0        1.0\n",
            "4              1   McLaren  ...           2.0        1.0\n",
            "5              1   McLaren  ...           2.0        1.0\n",
            "6              1   McLaren  ...           2.0        2.0\n",
            "7              1   McLaren  ...           2.0        2.0\n",
            "8              1   McLaren  ...           2.0        2.0\n",
            "9              1   McLaren  ...           2.0        3.0\n",
            "\n",
            "[10 rows x 7 columns]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.479435Z",
          "iopub.execute_input": "2021-07-06T18:04:58.479910Z",
          "iopub.status.idle": "2021-07-06T18:04:58.490130Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.479863Z",
          "shell.execute_reply": "2021-07-06T18:04:58.488933Z"
        },
        "trusted": true,
        "id": "tivMLzitKwQe"
      },
      "source": [
        "pit_stops_raw=pit_stops_raw.drop([\"time\",\"duration\"],axis=1)\n",
        "pit_stops_raw=pit_stops_raw.sort_values([\"raceId\",\"driverId\"],ascending=True)\n",
        "quali_raw=quali_raw.drop([\"qualifyId\",\"number\"],axis=1)"
      ],
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Erj_Re7vKwQi"
      },
      "source": [
        "# **Start of Lap_Times dataset Cleaning**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.491850Z",
          "iopub.execute_input": "2021-07-06T18:04:58.492179Z",
          "iopub.status.idle": "2021-07-06T18:04:58.545091Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.492149Z",
          "shell.execute_reply": "2021-07-06T18:04:58.543733Z"
        },
        "trusted": true,
        "id": "ASvDHtOxKwQj"
      },
      "source": [
        "new_lap_times=pd.DataFrame(lap_times_raw.groupby([\"raceId\",\"driverId\"]).mean([\"milliseconds\"]).reset_index())"
      ],
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.546691Z",
          "iopub.execute_input": "2021-07-06T18:04:58.547131Z",
          "iopub.status.idle": "2021-07-06T18:04:58.555083Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.547089Z",
          "shell.execute_reply": "2021-07-06T18:04:58.553838Z"
        },
        "trusted": true,
        "id": "I1KZZqmmKwQk"
      },
      "source": [
        "rename1={'milliseconds':'Avg_lap_time','lap':'total_laps'}\n",
        "new_lap_times=new_lap_times.rename(columns=rename1)\n",
        "new_lap_times=new_lap_times.drop(['position'],axis=1)"
      ],
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.556967Z",
          "iopub.execute_input": "2021-07-06T18:04:58.557416Z",
          "iopub.status.idle": "2021-07-06T18:04:58.576284Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.557373Z",
          "shell.execute_reply": "2021-07-06T18:04:58.575407Z"
        },
        "trusted": true,
        "id": "sxyqIiJ-KwQl"
      },
      "source": [
        "race_index=new_lap_times.loc[new_lap_times[\"raceId\"]==841].index.min()\n",
        "new_lap_times=new_lap_times[race_index:]"
      ],
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.577993Z",
          "iopub.execute_input": "2021-07-06T18:04:58.578806Z",
          "iopub.status.idle": "2021-07-06T18:04:58.594868Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.578743Z",
          "shell.execute_reply": "2021-07-06T18:04:58.593793Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LNOtxw7tKwQl",
        "outputId": "fa38125b-1100-4a20-fe74-c59287bf14c0"
      },
      "source": [
        "print(new_lap_times.head())\n",
        "new_lap_times.shape"
      ],
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "      raceId  driverId  total_laps  Avg_lap_time\n",
            "5233     841         1        29.5  92975.103448\n",
            "5234     841         2        29.0  95507.035088\n",
            "5235     841         3        11.5  96448.909091\n",
            "5236     841         4        29.5  93138.465517\n",
            "5237     841         5        10.0  98761.000000\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(4057, 4)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Wmb2r3crKwQn"
      },
      "source": [
        "# **End of Lap_Times dataset cleaning**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rvbpeHNWKwQn"
      },
      "source": [
        "# **Start of Quali_data cleaning**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.596573Z",
          "iopub.execute_input": "2021-07-06T18:04:58.597448Z",
          "iopub.status.idle": "2021-07-06T18:04:58.608884Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.597400Z",
          "shell.execute_reply": "2021-07-06T18:04:58.607876Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "28EAN0i_KwQo",
        "outputId": "2fbc6342-642b-4f67-ac87-1de85eedbaec"
      },
      "source": [
        "pit_stops_raw=pit_stops_raw.rename(columns={\"lap\":\"laps_pit\",\"milliseconds\":\"avg_pit_ms\"})\n",
        "quali_raw=quali_raw.rename(columns={\"position\":\"q_pos\"})\n",
        "q_race_index=quali_raw.loc[quali_raw[\"raceId\"]==841].index.min()\n",
        "q_race_index"
      ],
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4535"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.610316Z",
          "iopub.execute_input": "2021-07-06T18:04:58.610781Z",
          "iopub.status.idle": "2021-07-06T18:04:58.622419Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.610726Z",
          "shell.execute_reply": "2021-07-06T18:04:58.621406Z"
        },
        "trusted": true,
        "id": "t9XJONPwKwQq"
      },
      "source": [
        "quali_raw=quali_raw[q_race_index:]"
      ],
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.623811Z",
          "iopub.execute_input": "2021-07-06T18:04:58.624346Z",
          "iopub.status.idle": "2021-07-06T18:04:58.638170Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.624306Z",
          "shell.execute_reply": "2021-07-06T18:04:58.636846Z"
        },
        "trusted": true,
        "id": "zaFrjgZ6KwQr"
      },
      "source": [
        "quali_raw=quali_raw.sort_values([\"raceId\",\"driverId\"],ascending=True)\n",
        "quali_raw=quali_raw.drop(7276,axis=0)"
      ],
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.639529Z",
          "iopub.execute_input": "2021-07-06T18:04:58.640199Z",
          "iopub.status.idle": "2021-07-06T18:04:58.698840Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.640157Z",
          "shell.execute_reply": "2021-07-06T18:04:58.697958Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "rjLqQTNOKwQs",
        "outputId": "80f1af25-d6c1-4ee0-d205-d1b7c5446a4e"
      },
      "source": [
        "# quali_raw['best_quali_time']=0\n",
        "time_convert=['q1','q2','q3']\n",
        "for t in time_convert:\n",
        "    #quali_raw[t]=re.sub(r\"\\\\N\",'',quali_raw[t])\n",
        "    #print(quali_raw['q1'].head())\n",
        "    quali_raw[t]=quali_raw[t].str.replace(r'\\\\N','')\n",
        "    #print(quali_raw.head(15))\n",
        "quali_raw=quali_raw.replace(r'^\\s*$',np.nan,regex=True)\n",
        "#quali_raw.isnull().sum()\n",
        "quali_raw.head(15)"
      ],
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>raceId</th>\n",
              "      <th>driverId</th>\n",
              "      <th>constructorId</th>\n",
              "      <th>q_pos</th>\n",
              "      <th>q1</th>\n",
              "      <th>q2</th>\n",
              "      <th>q3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4536</th>\n",
              "      <td>841</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>01:25.4</td>\n",
              "      <td>01:24.6</td>\n",
              "      <td>01:24.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4552</th>\n",
              "      <td>841</td>\n",
              "      <td>2</td>\n",
              "      <td>4</td>\n",
              "      <td>18</td>\n",
              "      <td>01:27.2</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4541</th>\n",
              "      <td>841</td>\n",
              "      <td>3</td>\n",
              "      <td>131</td>\n",
              "      <td>7</td>\n",
              "      <td>01:25.9</td>\n",
              "      <td>01:25.6</td>\n",
              "      <td>01:25.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4539</th>\n",
              "      <td>841</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>01:25.7</td>\n",
              "      <td>01:25.2</td>\n",
              "      <td>01:25.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4553</th>\n",
              "      <td>841</td>\n",
              "      <td>5</td>\n",
              "      <td>205</td>\n",
              "      <td>19</td>\n",
              "      <td>01:29.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4555</th>\n",
              "      <td>841</td>\n",
              "      <td>10</td>\n",
              "      <td>166</td>\n",
              "      <td>21</td>\n",
              "      <td>01:29.9</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4542</th>\n",
              "      <td>841</td>\n",
              "      <td>13</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>01:26.0</td>\n",
              "      <td>01:25.6</td>\n",
              "      <td>01:25.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4554</th>\n",
              "      <td>841</td>\n",
              "      <td>15</td>\n",
              "      <td>205</td>\n",
              "      <td>20</td>\n",
              "      <td>01:29.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4550</th>\n",
              "      <td>841</td>\n",
              "      <td>16</td>\n",
              "      <td>10</td>\n",
              "      <td>16</td>\n",
              "      <td>01:26.2</td>\n",
              "      <td>01:31.4</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4537</th>\n",
              "      <td>841</td>\n",
              "      <td>17</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "      <td>01:25.9</td>\n",
              "      <td>01:24.7</td>\n",
              "      <td>01:24.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4538</th>\n",
              "      <td>841</td>\n",
              "      <td>18</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>01:25.9</td>\n",
              "      <td>01:25.0</td>\n",
              "      <td>01:24.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4535</th>\n",
              "      <td>841</td>\n",
              "      <td>20</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>01:25.3</td>\n",
              "      <td>01:24.1</td>\n",
              "      <td>01:23.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4551</th>\n",
              "      <td>841</td>\n",
              "      <td>22</td>\n",
              "      <td>3</td>\n",
              "      <td>17</td>\n",
              "      <td>01:26.3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4558</th>\n",
              "      <td>841</td>\n",
              "      <td>24</td>\n",
              "      <td>164</td>\n",
              "      <td>23</td>\n",
              "      <td>01:33.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4545</th>\n",
              "      <td>841</td>\n",
              "      <td>30</td>\n",
              "      <td>131</td>\n",
              "      <td>11</td>\n",
              "      <td>01:26.0</td>\n",
              "      <td>01:26.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      raceId  driverId  constructorId  q_pos       q1       q2       q3\n",
              "4536     841         1              1      2  01:25.4  01:24.6  01:24.3\n",
              "4552     841         2              4     18  01:27.2      NaN      NaN\n",
              "4541     841         3            131      7  01:25.9  01:25.6  01:25.4\n",
              "4539     841         4              6      5  01:25.7  01:25.2  01:25.0\n",
              "4553     841         5            205     19  01:29.3      NaN      NaN\n",
              "4555     841        10            166     21  01:29.9      NaN      NaN\n",
              "4542     841        13              6      8  01:26.0  01:25.6  01:25.6\n",
              "4554     841        15            205     20  01:29.3      NaN      NaN\n",
              "4550     841        16             10     16  01:26.2  01:31.4      NaN\n",
              "4537     841        17              9      3  01:25.9  01:24.7  01:24.4\n",
              "4538     841        18              1      4  01:25.9  01:25.0  01:24.8\n",
              "4535     841        20              9      1  01:25.3  01:24.1  01:23.5\n",
              "4551     841        22              3     17  01:26.3      NaN      NaN\n",
              "4558     841        24            164     23  01:33.0      NaN      NaN\n",
              "4545     841        30            131     11  01:26.0  01:26.0      NaN"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ETE4jIkoKwQu"
      },
      "source": [
        "Modify Quali excel to have best quali time over three sessions\n",
        "--convert to milliseconds\n",
        "--find the lowest time"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Qd3bqyORKwQv"
      },
      "source": [
        "# **End of Quali_data cleaning**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-VS1dhVlKwQv"
      },
      "source": [
        "# **Start of Pit_Stops_Cleaning**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.699943Z",
          "iopub.execute_input": "2021-07-06T18:04:58.700365Z",
          "iopub.status.idle": "2021-07-06T18:04:58.712722Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.700330Z",
          "shell.execute_reply": "2021-07-06T18:04:58.711535Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "9G882kAUKwQv",
        "outputId": "00d100a6-146e-434c-8b84-3bb4b6168e3e"
      },
      "source": [
        "pit_stops_raw.head(10)"
      ],
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>raceId</th>\n",
              "      <th>driverId</th>\n",
              "      <th>stop</th>\n",
              "      <th>laps_pit</th>\n",
              "      <th>avg_pit_ms</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>841</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>16</td>\n",
              "      <td>23227</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>841</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>36</td>\n",
              "      <td>23199</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>841</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>15</td>\n",
              "      <td>22994</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>841</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>30</td>\n",
              "      <td>25098</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>841</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>16</td>\n",
              "      <td>23716</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>841</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>12</td>\n",
              "      <td>23251</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>841</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>27</td>\n",
              "      <td>24733</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>841</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>42</td>\n",
              "      <td>24181</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>841</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>17</td>\n",
              "      <td>24865</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>841</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>18</td>\n",
              "      <td>23792</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    raceId  driverId  stop  laps_pit  avg_pit_ms\n",
              "11     841         1     1        16       23227\n",
              "33     841         1     2        36       23199\n",
              "10     841         2     1        15       22994\n",
              "29     841         2     2        30       25098\n",
              "13     841         3     1        16       23716\n",
              "3      841         4     1        12       23251\n",
              "26     841         4     2        27       24733\n",
              "43     841         4     3        42       24181\n",
              "19     841         5     1        17       24865\n",
              "21     841        10     1        18       23792"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 64
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.714184Z",
          "iopub.execute_input": "2021-07-06T18:04:58.714737Z",
          "iopub.status.idle": "2021-07-06T18:04:58.854472Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.714694Z",
          "shell.execute_reply": "2021-07-06T18:04:58.853520Z"
        },
        "trusted": true,
        "id": "_8im8RsSKwQw"
      },
      "source": [
        "pit_stops_raw=pit_stops_raw.groupby([\"raceId\",\"driverId\"]).agg({'stop':'count','laps_pit': list , 'avg_pit_ms':'mean'}).reset_index()\n",
        "pit_filtered=pit_stops_raw.drop(columns=\"laps_pit\",axis=1)"
      ],
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.855982Z",
          "iopub.execute_input": "2021-07-06T18:04:58.856275Z",
          "iopub.status.idle": "2021-07-06T18:04:58.867800Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.856246Z",
          "shell.execute_reply": "2021-07-06T18:04:58.866976Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "EP88y83LKwQx",
        "outputId": "eb89c7e2-0727-4813-e911-d6951a158165"
      },
      "source": [
        "pit_filtered.head(10)"
      ],
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>raceId</th>\n",
              "      <th>driverId</th>\n",
              "      <th>stop</th>\n",
              "      <th>avg_pit_ms</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>841</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>23213.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>841</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>24046.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>841</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>23716.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>841</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>24055.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>841</td>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>24865.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>841</td>\n",
              "      <td>10</td>\n",
              "      <td>1</td>\n",
              "      <td>23792.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>841</td>\n",
              "      <td>13</td>\n",
              "      <td>3</td>\n",
              "      <td>24145.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>841</td>\n",
              "      <td>15</td>\n",
              "      <td>2</td>\n",
              "      <td>24873.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>841</td>\n",
              "      <td>16</td>\n",
              "      <td>2</td>\n",
              "      <td>24924.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>841</td>\n",
              "      <td>17</td>\n",
              "      <td>3</td>\n",
              "      <td>24058.666667</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   raceId  driverId  stop    avg_pit_ms\n",
              "0     841         1     2  23213.000000\n",
              "1     841         2     2  24046.000000\n",
              "2     841         3     1  23716.000000\n",
              "3     841         4     3  24055.000000\n",
              "4     841         5     1  24865.000000\n",
              "5     841        10     1  23792.000000\n",
              "6     841        13     3  24145.666667\n",
              "7     841        15     2  24873.500000\n",
              "8     841        16     2  24924.500000\n",
              "9     841        17     3  24058.666667"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m_f6x5znKwQx"
      },
      "source": [
        "# **End of Pit_stops cleaning**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.868913Z",
          "iopub.execute_input": "2021-07-06T18:04:58.869383Z",
          "iopub.status.idle": "2021-07-06T18:04:58.884546Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.869336Z",
          "shell.execute_reply": "2021-07-06T18:04:58.883736Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u4nrtUtmKwQx",
        "outputId": "157766e5-5223-4f83-f78b-fcb2519fd2ea"
      },
      "source": [
        "print(quali_raw.head())\n",
        "print(pit_filtered.head())\n",
        "print(new_lap_times.head())"
      ],
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "      raceId  driverId  constructorId  q_pos       q1       q2       q3\n",
            "4536     841         1              1      2  01:25.4  01:24.6  01:24.3\n",
            "4552     841         2              4     18  01:27.2      NaN      NaN\n",
            "4541     841         3            131      7  01:25.9  01:25.6  01:25.4\n",
            "4539     841         4              6      5  01:25.7  01:25.2  01:25.0\n",
            "4553     841         5            205     19  01:29.3      NaN      NaN\n",
            "   raceId  driverId  stop  avg_pit_ms\n",
            "0     841         1     2     23213.0\n",
            "1     841         2     2     24046.0\n",
            "2     841         3     1     23716.0\n",
            "3     841         4     3     24055.0\n",
            "4     841         5     1     24865.0\n",
            "      raceId  driverId  total_laps  Avg_lap_time\n",
            "5233     841         1        29.5  92975.103448\n",
            "5234     841         2        29.0  95507.035088\n",
            "5235     841         3        11.5  96448.909091\n",
            "5236     841         4        29.5  93138.465517\n",
            "5237     841         5        10.0  98761.000000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.885658Z",
          "iopub.execute_input": "2021-07-06T18:04:58.886195Z",
          "iopub.status.idle": "2021-07-06T18:04:58.909948Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.886163Z",
          "shell.execute_reply": "2021-07-06T18:04:58.908800Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TZy0gS3fKwQy",
        "outputId": "cce2fe13-6e44-4c50-d757-e076ec842a98"
      },
      "source": [
        "race_data=new_lap_times.merge(pit_filtered,how='outer')\n",
        "print(race_data.head())\n",
        "print(race_data.shape)"
      ],
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "   raceId  driverId  total_laps  Avg_lap_time  stop  avg_pit_ms\n",
            "0     841         1        29.5  92975.103448   2.0     23213.0\n",
            "1     841         2        29.0  95507.035088   2.0     24046.0\n",
            "2     841         3        11.5  96448.909091   1.0     23716.0\n",
            "3     841         4        29.5  93138.465517   3.0     24055.0\n",
            "4     841         5        10.0  98761.000000   1.0     24865.0\n",
            "(4057, 6)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.911303Z",
          "iopub.execute_input": "2021-07-06T18:04:58.911897Z",
          "iopub.status.idle": "2021-07-06T18:04:58.916274Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.911854Z",
          "shell.execute_reply": "2021-07-06T18:04:58.915287Z"
        },
        "trusted": true,
        "id": "5Z9uG1shKwQz"
      },
      "source": [
        "#results.head()"
      ],
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:04:58.917909Z",
          "iopub.execute_input": "2021-07-06T18:04:58.918188Z",
          "iopub.status.idle": "2021-07-06T18:05:09.340805Z",
          "shell.execute_reply.started": "2021-07-06T18:04:58.918161Z",
          "shell.execute_reply": "2021-07-06T18:05:09.339773Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 669
        },
        "id": "87WJDbdTKwQz",
        "outputId": "f497653a-3053-4548-88d1-a985db8a51e2"
      },
      "source": [
        "weekend_data=race_data.merge(quali_raw,how='inner')\n",
        "#print(weekend_data.head(30))\n",
        "# print(weekend_data.shape)\n",
        "# driver_data.head()\n",
        "weekend_data['stop']=weekend_data['stop'].fillna(int(weekend_data['stop'].mean()))\n",
        "weekend_data['avg_pit_ms']=weekend_data['avg_pit_ms'].fillna(weekend_data['avg_pit_ms'].mean())\n",
        "q=['q1','q2','q3']\n",
        "for a in q:\n",
        "    weekend_data[a]=weekend_data[a].str.replace('.',':')\n",
        "    weekend_data[a]=weekend_data[a].str.split(':')\n",
        "    weekend_data[a]=weekend_data[a].fillna(0)\n",
        "    \n",
        "    for index,t in weekend_data.iterrows():\n",
        "        if t[a]==0:\n",
        "            pass\n",
        "        else:\n",
        "            t_ms=(int(t[a][0])*60*1000)+(int(t[a][1])*1000)+int(t[a][2])\n",
        "            weekend_data.loc[(weekend_data['raceId']==t['raceId']) & (weekend_data['driverId']==t['driverId']),a]=t_ms\n",
        "#             weekend_data.loc[a]=weekend_data[a].replace(t,t_ms)\n",
        "#     print(t_sec) \n",
        "weekend_data.isnull().sum()\n",
        "weekend_data.head(20)"
      ],
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>raceId</th>\n",
              "      <th>driverId</th>\n",
              "      <th>total_laps</th>\n",
              "      <th>Avg_lap_time</th>\n",
              "      <th>stop</th>\n",
              "      <th>avg_pit_ms</th>\n",
              "      <th>constructorId</th>\n",
              "      <th>q_pos</th>\n",
              "      <th>q1</th>\n",
              "      <th>q2</th>\n",
              "      <th>q3</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>841</td>\n",
              "      <td>1</td>\n",
              "      <td>29.5</td>\n",
              "      <td>92975.103448</td>\n",
              "      <td>2.0</td>\n",
              "      <td>23213.000000</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>85004</td>\n",
              "      <td>84006</td>\n",
              "      <td>84003</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>841</td>\n",
              "      <td>2</td>\n",
              "      <td>29.0</td>\n",
              "      <td>95507.035088</td>\n",
              "      <td>2.0</td>\n",
              "      <td>24046.000000</td>\n",
              "      <td>4</td>\n",
              "      <td>18</td>\n",
              "      <td>87002</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>841</td>\n",
              "      <td>3</td>\n",
              "      <td>11.5</td>\n",
              "      <td>96448.909091</td>\n",
              "      <td>1.0</td>\n",
              "      <td>23716.000000</td>\n",
              "      <td>131</td>\n",
              "      <td>7</td>\n",
              "      <td>85009</td>\n",
              "      <td>85006</td>\n",
              "      <td>85004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>841</td>\n",
              "      <td>4</td>\n",
              "      <td>29.5</td>\n",
              "      <td>93138.465517</td>\n",
              "      <td>3.0</td>\n",
              "      <td>24055.000000</td>\n",
              "      <td>6</td>\n",
              "      <td>5</td>\n",
              "      <td>85007</td>\n",
              "      <td>85002</td>\n",
              "      <td>85000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>841</td>\n",
              "      <td>5</td>\n",
              "      <td>10.0</td>\n",
              "      <td>98761.000000</td>\n",
              "      <td>1.0</td>\n",
              "      <td>24865.000000</td>\n",
              "      <td>205</td>\n",
              "      <td>19</td>\n",
              "      <td>89003</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>841</td>\n",
              "      <td>10</td>\n",
              "      <td>25.0</td>\n",
              "      <td>111482.387755</td>\n",
              "      <td>1.0</td>\n",
              "      <td>23792.000000</td>\n",
              "      <td>166</td>\n",
              "      <td>21</td>\n",
              "      <td>89009</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>841</td>\n",
              "      <td>13</td>\n",
              "      <td>29.5</td>\n",
              "      <td>94059.396552</td>\n",
              "      <td>3.0</td>\n",
              "      <td>24145.666667</td>\n",
              "      <td>6</td>\n",
              "      <td>8</td>\n",
              "      <td>86000</td>\n",
              "      <td>85006</td>\n",
              "      <td>85006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>841</td>\n",
              "      <td>15</td>\n",
              "      <td>28.5</td>\n",
              "      <td>97384.571429</td>\n",
              "      <td>2.0</td>\n",
              "      <td>24873.500000</td>\n",
              "      <td>205</td>\n",
              "      <td>20</td>\n",
              "      <td>89003</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>841</td>\n",
              "      <td>16</td>\n",
              "      <td>29.0</td>\n",
              "      <td>94645.508772</td>\n",
              "      <td>2.0</td>\n",
              "      <td>24924.500000</td>\n",
              "      <td>10</td>\n",
              "      <td>16</td>\n",
              "      <td>86002</td>\n",
              "      <td>91004</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>841</td>\n",
              "      <td>17</td>\n",
              "      <td>29.5</td>\n",
              "      <td>93248.793103</td>\n",
              "      <td>3.0</td>\n",
              "      <td>24058.666667</td>\n",
              "      <td>9</td>\n",
              "      <td>3</td>\n",
              "      <td>85009</td>\n",
              "      <td>84007</td>\n",
              "      <td>84004</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>841</td>\n",
              "      <td>18</td>\n",
              "      <td>29.5</td>\n",
              "      <td>93526.948276</td>\n",
              "      <td>3.0</td>\n",
              "      <td>20950.333333</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>85009</td>\n",
              "      <td>85000</td>\n",
              "      <td>84008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>841</td>\n",
              "      <td>20</td>\n",
              "      <td>29.5</td>\n",
              "      <td>92590.672414</td>\n",
              "      <td>2.0</td>\n",
              "      <td>23319.500000</td>\n",
              "      <td>9</td>\n",
              "      <td>1</td>\n",
              "      <td>85003</td>\n",
              "      <td>84001</td>\n",
              "      <td>83005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>841</td>\n",
              "      <td>22</td>\n",
              "      <td>24.5</td>\n",
              "      <td>96734.500000</td>\n",
              "      <td>4.0</td>\n",
              "      <td>26175.000000</td>\n",
              "      <td>3</td>\n",
              "      <td>17</td>\n",
              "      <td>86003</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>841</td>\n",
              "      <td>30</td>\n",
              "      <td>10.0</td>\n",
              "      <td>101762.473684</td>\n",
              "      <td>2.0</td>\n",
              "      <td>24504.500000</td>\n",
              "      <td>131</td>\n",
              "      <td>11</td>\n",
              "      <td>86000</td>\n",
              "      <td>86000</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>841</td>\n",
              "      <td>67</td>\n",
              "      <td>29.0</td>\n",
              "      <td>94363.245614</td>\n",
              "      <td>2.0</td>\n",
              "      <td>24221.000000</td>\n",
              "      <td>5</td>\n",
              "      <td>10</td>\n",
              "      <td>86002</td>\n",
              "      <td>85009</td>\n",
              "      <td>87001</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>841</td>\n",
              "      <td>153</td>\n",
              "      <td>29.0</td>\n",
              "      <td>95244.263158</td>\n",
              "      <td>3.0</td>\n",
              "      <td>25903.000000</td>\n",
              "      <td>5</td>\n",
              "      <td>12</td>\n",
              "      <td>86006</td>\n",
              "      <td>86001</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>841</td>\n",
              "      <td>155</td>\n",
              "      <td>29.5</td>\n",
              "      <td>93916.051724</td>\n",
              "      <td>2.0</td>\n",
              "      <td>24128.000000</td>\n",
              "      <td>15</td>\n",
              "      <td>9</td>\n",
              "      <td>85007</td>\n",
              "      <td>85004</td>\n",
              "      <td>85006</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>841</td>\n",
              "      <td>808</td>\n",
              "      <td>29.5</td>\n",
              "      <td>93117.568966</td>\n",
              "      <td>2.0</td>\n",
              "      <td>25109.000000</td>\n",
              "      <td>4</td>\n",
              "      <td>6</td>\n",
              "      <td>85005</td>\n",
              "      <td>85006</td>\n",
              "      <td>85002</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>841</td>\n",
              "      <td>813</td>\n",
              "      <td>5.0</td>\n",
              "      <td>97992.888889</td>\n",
              "      <td>2.0</td>\n",
              "      <td>44650.641987</td>\n",
              "      <td>3</td>\n",
              "      <td>15</td>\n",
              "      <td>86003</td>\n",
              "      <td>86008</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>841</td>\n",
              "      <td>814</td>\n",
              "      <td>29.0</td>\n",
              "      <td>95153.789474</td>\n",
              "      <td>2.0</td>\n",
              "      <td>24597.500000</td>\n",
              "      <td>10</td>\n",
              "      <td>14</td>\n",
              "      <td>87002</td>\n",
              "      <td>86007</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    raceId  driverId  total_laps   Avg_lap_time  ...  q_pos     q1     q2     q3\n",
              "0      841         1        29.5   92975.103448  ...      2  85004  84006  84003\n",
              "1      841         2        29.0   95507.035088  ...     18  87002      0      0\n",
              "2      841         3        11.5   96448.909091  ...      7  85009  85006  85004\n",
              "3      841         4        29.5   93138.465517  ...      5  85007  85002  85000\n",
              "4      841         5        10.0   98761.000000  ...     19  89003      0      0\n",
              "5      841        10        25.0  111482.387755  ...     21  89009      0      0\n",
              "6      841        13        29.5   94059.396552  ...      8  86000  85006  85006\n",
              "7      841        15        28.5   97384.571429  ...     20  89003      0      0\n",
              "8      841        16        29.0   94645.508772  ...     16  86002  91004      0\n",
              "9      841        17        29.5   93248.793103  ...      3  85009  84007  84004\n",
              "10     841        18        29.5   93526.948276  ...      4  85009  85000  84008\n",
              "11     841        20        29.5   92590.672414  ...      1  85003  84001  83005\n",
              "12     841        22        24.5   96734.500000  ...     17  86003      0      0\n",
              "13     841        30        10.0  101762.473684  ...     11  86000  86000      0\n",
              "14     841        67        29.0   94363.245614  ...     10  86002  85009  87001\n",
              "15     841       153        29.0   95244.263158  ...     12  86006  86001      0\n",
              "16     841       155        29.5   93916.051724  ...      9  85007  85004  85006\n",
              "17     841       808        29.5   93117.568966  ...      6  85005  85006  85002\n",
              "18     841       813         5.0   97992.888889  ...     15  86003  86008      0\n",
              "19     841       814        29.0   95153.789474  ...     14  87002  86007      0\n",
              "\n",
              "[20 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:05:09.342113Z",
          "iopub.execute_input": "2021-07-06T18:05:09.342398Z",
          "iopub.status.idle": "2021-07-06T18:05:13.808857Z",
          "shell.execute_reply.started": "2021-07-06T18:05:09.342370Z",
          "shell.execute_reply": "2021-07-06T18:05:13.807595Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IUGYa8BDKwQ0",
        "outputId": "bc38448a-7a2b-4413-9383-e938b29fc081"
      },
      "source": [
        "weekend_data['fastest_time']=0\n",
        "for index,row in weekend_data.iterrows():\n",
        "    #print(row['q1'])\n",
        "    if (row['q1']!=0) & (row['q2']==0 & row['q3']==0):\n",
        "        time=row['q1']\n",
        "        weekend_data.loc[(weekend_data['raceId']==row['raceId']) & (weekend_data['driverId']==row['driverId']),'fastest_time']=time\n",
        "    elif(row['q1']!=0 & row['q2']!=0) & (row['q3']==0):\n",
        "        time=min(row['q1'],row['q2'])\n",
        "        weekend_data.loc[(weekend_data['raceId']==row['raceId']) & (weekend_data['driverId']==row['driverId']),'fastest_time']=time\n",
        "    else:\n",
        "        time=min(row['q1'],row['q2'],row['q3'])\n",
        "        weekend_data.loc[(weekend_data['raceId']==row['raceId']) & (weekend_data['driverId']==row['driverId']),'fastest_time']=time\n",
        "print(weekend_data['fastest_time'])"
      ],
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0       84003\n",
            "1       87002\n",
            "2       85004\n",
            "3       85000\n",
            "4       89003\n",
            "        ...  \n",
            "4032    95005\n",
            "4033    98000\n",
            "4034    95006\n",
            "4035    98004\n",
            "4036    98002\n",
            "Name: fastest_time, Length: 4037, dtype: int64\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:05:13.810173Z",
          "iopub.execute_input": "2021-07-06T18:05:13.810477Z",
          "iopub.status.idle": "2021-07-06T18:05:13.858992Z",
          "shell.execute_reply.started": "2021-07-06T18:05:13.810447Z",
          "shell.execute_reply": "2021-07-06T18:05:13.858045Z"
        },
        "trusted": true,
        "id": "KGGmsuYNKwQ1"
      },
      "source": [
        "overall_data_a=results.merge(weekend_data,how='inner')\n",
        "overall_data_b=overall_data_a.merge(driver_data,how='inner')\n",
        "overall_data_c=overall_data_b.merge(constructors_data,how='inner')"
      ],
      "execution_count": 72,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:05:13.860052Z",
          "iopub.execute_input": "2021-07-06T18:05:13.860490Z",
          "iopub.status.idle": "2021-07-06T18:05:13.866769Z",
          "shell.execute_reply.started": "2021-07-06T18:05:13.860460Z",
          "shell.execute_reply": "2021-07-06T18:05:13.865658Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h0J8b_5nKwQ1",
        "outputId": "794cf671-f3c2-4237-fa14-73dd0f61f19f"
      },
      "source": [
        "overall_data_c.columns"
      ],
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['raceId', 'year', 'round', 'circuitId', 'name', 'date', 'race_time',\n",
              "       'driverId', 'constructorId', 'number', 'grid', 'position',\n",
              "       'positionOrder', 'points', 'laps', 'time', 'milliseconds', 'fastestLap',\n",
              "       'rank', 'fastestLapTime', 'fastestLapSpeed', 'status', 'total_laps',\n",
              "       'Avg_lap_time', 'stop', 'avg_pit_ms', 'q_pos', 'q1', 'q2', 'q3',\n",
              "       'fastest_time', 'forename', 'surname', 'nationality', 'Age',\n",
              "       'driver_points', 'driver_position', 'driver_wins', 'Cons_name',\n",
              "       'Cons_nationality', 'Cons_points', 'Cons_position', 'Cons_wins'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:05:13.868172Z",
          "iopub.execute_input": "2021-07-06T18:05:13.868467Z",
          "iopub.status.idle": "2021-07-06T18:05:13.884448Z",
          "shell.execute_reply.started": "2021-07-06T18:05:13.868439Z",
          "shell.execute_reply": "2021-07-06T18:05:13.883241Z"
        },
        "trusted": true,
        "id": "NHKRYPHlKwQ2"
      },
      "source": [
        "overall_data_c['Driver_name']=overall_data_c['forename']+ ' ' +overall_data_c['surname']"
      ],
      "execution_count": 74,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:05:13.886025Z",
          "iopub.execute_input": "2021-07-06T18:05:13.886348Z",
          "iopub.status.idle": "2021-07-06T18:05:13.924954Z",
          "shell.execute_reply.started": "2021-07-06T18:05:13.886321Z",
          "shell.execute_reply": "2021-07-06T18:05:13.923893Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "qEIUk7gvKwQ2",
        "outputId": "13cb82d7-6113-45d8-d9e6-ffed7653bd80"
      },
      "source": [
        "overall_drop=['circuitId','race_time','total_laps','forename','surname']\n",
        "overall_data=overall_data_c.drop(columns=overall_drop,axis=1)\n",
        "columns_order=['raceId','year','round','name','date','driverId','Driver_name','number','nationality','Age','driver_points','driver_wins','driver_position','constructorId','Cons_name','Cons_nationality','Cons_points','Cons_wins','Cons_position','q_pos','fastest_time','q1','q2','q3','grid','positionOrder','position','points','laps','time','milliseconds','fastestLap','fastestLapTime','fastestLapSpeed','Avg_lap_time','stop','avg_pit_ms','rank','status']\n",
        "overall_data=overall_data[columns_order]\n",
        "drop_data=['raceId','date','driverId','number','Cons_nationality','constructorId','Cons_points','Cons_position','Cons_wins','q_pos','fastestLapTime','driver_points','driver_wins','driver_position','q1','q2','q3','points','laps','time','milliseconds','fastestLap','fastestLapSpeed','rank','status','position']\n",
        "final_data=overall_data.drop(drop_data,axis=1)\n",
        "final_data.head()\n"
      ],
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>year</th>\n",
              "      <th>round</th>\n",
              "      <th>name</th>\n",
              "      <th>Driver_name</th>\n",
              "      <th>nationality</th>\n",
              "      <th>Age</th>\n",
              "      <th>Cons_name</th>\n",
              "      <th>fastest_time</th>\n",
              "      <th>grid</th>\n",
              "      <th>positionOrder</th>\n",
              "      <th>Avg_lap_time</th>\n",
              "      <th>stop</th>\n",
              "      <th>avg_pit_ms</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2011.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Australian Grand Prix</td>\n",
              "      <td>Sebastian Vettel</td>\n",
              "      <td>German</td>\n",
              "      <td>34</td>\n",
              "      <td>Red Bull</td>\n",
              "      <td>83005</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>92590.672414</td>\n",
              "      <td>2.0</td>\n",
              "      <td>23319.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2011.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Australian Grand Prix</td>\n",
              "      <td>Mark Webber</td>\n",
              "      <td>Australian</td>\n",
              "      <td>45</td>\n",
              "      <td>Red Bull</td>\n",
              "      <td>84004</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>93248.793103</td>\n",
              "      <td>3.0</td>\n",
              "      <td>24058.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2011.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Australian Grand Prix</td>\n",
              "      <td>Vitaly Petrov</td>\n",
              "      <td>Russian</td>\n",
              "      <td>37</td>\n",
              "      <td>Renault</td>\n",
              "      <td>85002</td>\n",
              "      <td>6.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>93117.568966</td>\n",
              "      <td>2.0</td>\n",
              "      <td>25109.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2011.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Australian Grand Prix</td>\n",
              "      <td>Nick Heidfeld</td>\n",
              "      <td>German</td>\n",
              "      <td>44</td>\n",
              "      <td>Renault</td>\n",
              "      <td>87002</td>\n",
              "      <td>18.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>95507.035088</td>\n",
              "      <td>2.0</td>\n",
              "      <td>24046.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2011.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>Australian Grand Prix</td>\n",
              "      <td>Fernando Alonso</td>\n",
              "      <td>Spanish</td>\n",
              "      <td>40</td>\n",
              "      <td>Ferrari</td>\n",
              "      <td>85000</td>\n",
              "      <td>5.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>93138.465517</td>\n",
              "      <td>3.0</td>\n",
              "      <td>24055.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     year  round                   name  ...  Avg_lap_time stop    avg_pit_ms\n",
              "0  2011.0    1.0  Australian Grand Prix  ...  92590.672414  2.0  23319.500000\n",
              "1  2011.0    1.0  Australian Grand Prix  ...  93248.793103  3.0  24058.666667\n",
              "2  2011.0    1.0  Australian Grand Prix  ...  93117.568966  2.0  25109.000000\n",
              "3  2011.0    1.0  Australian Grand Prix  ...  95507.035088  2.0  24046.000000\n",
              "4  2011.0    1.0  Australian Grand Prix  ...  93138.465517  3.0  24055.000000\n",
              "\n",
              "[5 rows x 13 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:05:13.926234Z",
          "iopub.execute_input": "2021-07-06T18:05:13.926574Z",
          "iopub.status.idle": "2021-07-06T18:05:13.971914Z",
          "shell.execute_reply.started": "2021-07-06T18:05:13.926544Z",
          "shell.execute_reply": "2021-07-06T18:05:13.970812Z"
        },
        "trusted": true,
        "id": "MNJKFr2BKwQ3"
      },
      "source": [
        "df_dum = pd.get_dummies(final_data, columns = ['name', 'nationality', 'Cons_name'] )\n",
        "processed_data=final_data.merge(df_dum, how='inner')\n",
        "processed_data=processed_data.drop(columns = ['name', 'nationality', 'Cons_name'], axis=1)"
      ],
      "execution_count": 76,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:05:13.976176Z",
          "iopub.execute_input": "2021-07-06T18:05:13.976528Z",
          "iopub.status.idle": "2021-07-06T18:05:13.982017Z",
          "shell.execute_reply.started": "2021-07-06T18:05:13.976495Z",
          "shell.execute_reply": "2021-07-06T18:05:13.980840Z"
        },
        "trusted": true,
        "id": "dhY2UogNKwQ4"
      },
      "source": [
        "def race_info(race,driver):\n",
        "    race_data=overall_data[(overall_data['name']==race) & (overall_data['Driver_name']==driver)]\n",
        "    return race_data\n",
        "#print(race_select('Hungarian Grand Prix','Sebastian Vettel'))"
      ],
      "execution_count": 77,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:05:13.983372Z",
          "iopub.execute_input": "2021-07-06T18:05:13.983833Z",
          "iopub.status.idle": "2021-07-06T18:05:14.340373Z",
          "shell.execute_reply.started": "2021-07-06T18:05:13.983793Z",
          "shell.execute_reply": "2021-07-06T18:05:14.339461Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 612
        },
        "id": "th43K0VDKwQ4",
        "outputId": "dea16a87-8e27-4b7c-c544-cd37b8a67e2d"
      },
      "source": [
        "data_corr=final_data.corr()\n",
        "mask = np.triu(np.ones_like(data_corr, dtype=bool))\n",
        "f, ax = plt.subplots(figsize=(11, 9))\n",
        "cmap = sns.diverging_palette(230, 20, as_cmap=True)\n",
        "sns.heatmap(data_corr, mask=mask, cmap=cmap, vmax=.3, center=0,square=True, linewidths=.5, cbar_kws={\"shrink\": .5})"
      ],
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f9fabf173d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 78
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 792x648 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:05:14.342027Z",
          "iopub.execute_input": "2021-07-06T18:05:14.342449Z",
          "iopub.status.idle": "2021-07-06T18:05:14.350733Z",
          "shell.execute_reply.started": "2021-07-06T18:05:14.342394Z",
          "shell.execute_reply": "2021-07-06T18:05:14.349542Z"
        },
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-aGFZRabKwQ5",
        "outputId": "135e46e8-a053-436a-8e7e-003acb503221"
      },
      "source": [
        "processed_data.columns"
      ],
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['year', 'round', 'Driver_name', 'Age', 'fastest_time', 'grid',\n",
              "       'positionOrder', 'Avg_lap_time', 'stop', 'avg_pit_ms',\n",
              "       'name_70th Anniversary Grand Prix', 'name_Abu Dhabi Grand Prix',\n",
              "       'name_Australian Grand Prix', 'name_Austrian Grand Prix',\n",
              "       'name_Azerbaijan Grand Prix', 'name_Bahrain Grand Prix',\n",
              "       'name_Belgian Grand Prix', 'name_Brazilian Grand Prix',\n",
              "       'name_British Grand Prix', 'name_Canadian Grand Prix',\n",
              "       'name_Chinese Grand Prix', 'name_Eifel Grand Prix',\n",
              "       'name_Emilia Romagna Grand Prix', 'name_European Grand Prix',\n",
              "       'name_French Grand Prix', 'name_German Grand Prix',\n",
              "       'name_Hungarian Grand Prix', 'name_Indian Grand Prix',\n",
              "       'name_Italian Grand Prix', 'name_Japanese Grand Prix',\n",
              "       'name_Korean Grand Prix', 'name_Malaysian Grand Prix',\n",
              "       'name_Mexican Grand Prix', 'name_Monaco Grand Prix',\n",
              "       'name_Portuguese Grand Prix', 'name_Russian Grand Prix',\n",
              "       'name_Sakhir Grand Prix', 'name_Singapore Grand Prix',\n",
              "       'name_Spanish Grand Prix', 'name_Styrian Grand Prix',\n",
              "       'name_Turkish Grand Prix', 'name_Tuscan Grand Prix',\n",
              "       'name_United States Grand Prix', 'nationality_American',\n",
              "       'nationality_Australian', 'nationality_Belgian',\n",
              "       'nationality_Brazilian', 'nationality_British', 'nationality_Canadian',\n",
              "       'nationality_Danish', 'nationality_Dutch', 'nationality_Finnish',\n",
              "       'nationality_French', 'nationality_German', 'nationality_Indian',\n",
              "       'nationality_Indonesian', 'nationality_Italian', 'nationality_Japanese',\n",
              "       'nationality_Mexican', 'nationality_Monegasque',\n",
              "       'nationality_New Zealander', 'nationality_Polish',\n",
              "       'nationality_Russian', 'nationality_Spanish', 'nationality_Swedish',\n",
              "       'nationality_Swiss', 'nationality_Thai', 'nationality_Venezuelan',\n",
              "       'Cons_name_Alfa Romeo', 'Cons_name_AlphaTauri', 'Cons_name_Caterham',\n",
              "       'Cons_name_Ferrari', 'Cons_name_Force India', 'Cons_name_HRT',\n",
              "       'Cons_name_Haas F1 Team', 'Cons_name_Lotus', 'Cons_name_Lotus F1',\n",
              "       'Cons_name_Manor Marussia', 'Cons_name_Marussia', 'Cons_name_McLaren',\n",
              "       'Cons_name_Mercedes', 'Cons_name_Racing Point', 'Cons_name_Red Bull',\n",
              "       'Cons_name_Renault', 'Cons_name_Sauber', 'Cons_name_Toro Rosso',\n",
              "       'Cons_name_Virgin', 'Cons_name_Williams'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NTRkiAt-MzpH",
        "outputId": "2e5b073c-3014-4fd7-e42a-c9408bcfefdd"
      },
      "source": [
        "processed_data['year'].describe()"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    4025.000000\n",
              "mean     2015.340870\n",
              "std         2.875927\n",
              "min      2011.000000\n",
              "25%      2013.000000\n",
              "50%      2015.000000\n",
              "75%      2018.000000\n",
              "max      2020.000000\n",
              "Name: year, dtype: float64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:05:14.352633Z",
          "iopub.execute_input": "2021-07-06T18:05:14.353086Z",
          "iopub.status.idle": "2021-07-06T18:05:14.366035Z",
          "shell.execute_reply.started": "2021-07-06T18:05:14.353041Z",
          "shell.execute_reply": "2021-07-06T18:05:14.364740Z"
        },
        "trusted": true,
        "id": "0N2uyMiSKwQ6"
      },
      "source": [
        "def score_regression(model):\n",
        "    score = 0\n",
        "    for circuit in df[df.year == 2020]['round'].unique():\n",
        "\n",
        "        test = df[(df.year == 2020) & (df['round'] == circuit)]\n",
        "        X_test = test.drop(['Driver_name', 'positionOrder'], axis = 1)\n",
        "        y_test = test.positionOrder\n",
        "\n",
        "        #scaling\n",
        "        X_test = pd.DataFrame(scaler.transform(X_test), columns = X_test.columns)\n",
        "\n",
        "        # make predictions\n",
        "        prediction_df = pd.DataFrame(model.predict(X_test), columns = ['results'])\n",
        "        prediction_df['podium'] = y_test.reset_index(drop = True)\n",
        "        prediction_df['actual'] = prediction_df.podium.map(lambda x: 1 if x == 1 else 0)\n",
        "        prediction_df.sort_values('results', ascending = True, inplace = True)\n",
        "        prediction_df.reset_index(inplace = True, drop = True)\n",
        "        prediction_df['predicted'] = prediction_df.index\n",
        "        prediction_df['predicted'] = prediction_df.predicted.map(lambda x: 1 if x == 0 else 0)\n",
        "\n",
        "        score += precision_score(prediction_df.actual, prediction_df.predicted)\n",
        "\n",
        "    model_score = score / df[df.year == 2020]['round'].unique().max()\n",
        "    return model_score, prediction_df"
      ],
      "execution_count": 81,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:05:14.367610Z",
          "iopub.execute_input": "2021-07-06T18:05:14.368089Z",
          "iopub.status.idle": "2021-07-06T18:05:14.385184Z",
          "shell.execute_reply.started": "2021-07-06T18:05:14.368041Z",
          "shell.execute_reply": "2021-07-06T18:05:14.384211Z"
        },
        "trusted": true,
        "id": "fIg08vzyKwQ7"
      },
      "source": [
        "def score_classification(model):\n",
        "    score = 0\n",
        "    for circuit in df[df.year == 2020]['round'].unique():\n",
        "\n",
        "        test = df[(df.year == 2020) & (df['round'] == circuit)]\n",
        "        X_test = test.drop(['Driver_name', 'positionOrder'], axis = 1)\n",
        "        y_test = test.positionOrder\n",
        "\n",
        "        #scaling\n",
        "        X_test = pd.DataFrame(scaler.transform(X_test), columns = X_test.columns)\n",
        "\n",
        "        # make predictions\n",
        "        prediction_df = pd.DataFrame(model.predict_proba(X_test), columns = ['proba_0', 'proba_1'])\n",
        "        prediction_df['actual'] = y_test.reset_index(drop = True)\n",
        "        prediction_df.sort_values('proba_1', ascending = False, inplace = True)\n",
        "        prediction_df.reset_index(inplace = True, drop = True)\n",
        "        prediction_df['predicted'] = prediction_df.index\n",
        "        prediction_df['predicted'] = prediction_df.predicted.map(lambda x: 1 if x == 0 else 0)\n",
        "\n",
        "        score += precision_score(prediction_df.actual, prediction_df.predicted)\n",
        "\n",
        "    model_score = score / df[df.year == 2020]['round'].unique().max()\n",
        "    return model_score, prediction_df"
      ],
      "execution_count": 82,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "12UU4TgPJ9hM",
        "outputId": "57fa5f96-dc8a-4f14-fa5e-dff38f64d152"
      },
      "source": [
        "df = processed_data.copy()\n",
        "df.positionOrder = df.positionOrder.map(lambda x: 1 if x == 1.0 else 0)\n",
        "train = df[df['year']< 2020]\n",
        "x_train = train.drop(['Driver_name', 'positionOrder'], axis = 1)\n",
        "y_train = train.positionOrder\n",
        "scaler = StandardScaler()\n",
        "x_train = pd.DataFrame(scaler.fit_transform(x_train), columns = x_train.columns)\n",
        "model_log=LogisticRegression(penalty='l1',C=0.21544346900318834,solver='saga')\n",
        "model_ran=RandomForestClassifier(criterion='gini',max_depth=9.0,max_features='auto')\n",
        "model_svc=svm.SVC(C=2.154434690031882,gamma= 0.016681005372000592, kernel= 'sigmoid',probability=True,random_state=3)\n",
        "model_nn=MLPClassifier(max_iter=800, activation='relu',alpha=2.154434690031882,hidden_layer_sizes=(75, 25, 50, 10), solver='sgd')\n",
        "model_nn.fit(x_train,y_train)\n",
        "model_svc.fit(x_train,y_train)\n",
        "model_ran.fit(x_train,y_train)\n",
        "model_log.fit(x_train,y_train)\n",
        "Logistic_score, Logistic_pred=score_classification(model_log)\n",
        "RandomForest_score, RandomForest_pred=score_classification(model_ran)\n",
        "svc_score, svc_pred=score_classification(model_svc)\n",
        "nn_score, nn_pred=score_classification(model_nn)"
      ],
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:571: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (800) reached and the optimization hasn't converged yet.\n",
            "  % self.max_iter, ConvergenceWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  \"the coef_ did not converge\", ConvergenceWarning)\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "nKBf2xHdZznf",
        "outputId": "c9b6be77-8174-4b66-c5bf-fa48ca0883e9"
      },
      "source": [
        "Logistic_pred.head()\n",
        "Logistic_score\n",
        "RandomForest_score\n",
        "RandomForest_pred.head()"
      ],
      "execution_count": 110,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>proba_0</th>\n",
              "      <th>proba_1</th>\n",
              "      <th>actual</th>\n",
              "      <th>predicted</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.673728</td>\n",
              "      <td>0.326272</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.755240</td>\n",
              "      <td>0.244760</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.774022</td>\n",
              "      <td>0.225978</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.968284</td>\n",
              "      <td>0.031716</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.969282</td>\n",
              "      <td>0.030718</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "    proba_0   proba_1  actual  predicted\n",
              "0  0.673728  0.326272       0          1\n",
              "1  0.755240  0.244760       1          0\n",
              "2  0.774022  0.225978       0          0\n",
              "3  0.968284  0.031716       0          0\n",
              "4  0.969282  0.030718       0          0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 110
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YVfj1qeqPz4g"
      },
      "source": [
        "nn_params_reg={'activation': 'tanh', 'alpha': 10.0, 'hidden_layer_sizes': (80, 20, 40, 5), 'solver': 'adam'}\n",
        "df = processed_data.copy()\n",
        "df=df.reset_index()\n",
        "train = df[df.year <2020]\n",
        "x_train = train.drop(['Driver_name', 'positionOrder'], axis = 1)\n",
        "y_train = train.positionOrder\n",
        "scaler = StandardScaler()\n",
        "x_train = pd.DataFrame(scaler.fit_transform(x_train), columns = x_train.columns)\n",
        "# model_log=LogisticRegression(penalty='l1',C='0.21544346900318834',solver='saga')\n",
        "# model_ran=RandomForestClassifier(criterion='gini',max_depth='9.0',max_features='auto')\n",
        "model_lr= LinearRegression()\n",
        "model_svr=svm.SVR(C=4.64,gamma= 0.004641, kernel= 'rbf')\n",
        "model_nn=MLPRegressor(max_iter=800, activation='tanh',alpha=10,hidden_layer_sizes=(80, 20, 40, 5), solver='adam')\n",
        "model_nn.fit(x_train,y_train)\n",
        "model_svr.fit(x_train,y_train)\n",
        "model_lr.fit(x_train,y_train)\n",
        "svr_score, svr_score_reg=score_regression(model_svr)\n",
        "nn_score_r, nn_score_reg=score_regression(model_nn)\n",
        "lr_score,lr_reg=score_regression(model_lr)"
      ],
      "execution_count": 116,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mEn37cqMSXaX",
        "outputId": "940bc56c-c2ff-4d96-a31e-e38a4bf1df97"
      },
      "source": [
        "svr_score\n",
        "nn_score_r\n",
        "lr_score"
      ],
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.23529411764705882"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:05:14.406505Z",
          "iopub.execute_input": "2021-07-06T18:05:14.406977Z"
        },
        "trusted": true,
        "id": "h4c9Web3KwQ_"
      },
      "source": [
        "# df = processed_data.copy()\n",
        "# df=df.reset_index()\n",
        "# #train split\n",
        "# train = df[df.year <2020]\n",
        "# X_train = train.drop(['Driver_name', 'positionOrder'], axis = 1)\n",
        "# y_train = train.positionOrder\n",
        "\n",
        "# scaler = StandardScaler()\n",
        "# X_train = pd.DataFrame(scaler.fit_transform(X_train), columns = X_train.columns)\n",
        "# #linear regression\n",
        "# model= LinearRegression()\n",
        "# model.fit(X_train, y_train)\n",
        "# LR_score=score_regression(model)\n",
        "# # Support Vector Machines\n",
        "# # params={'gamma': np.logspace(-4, -1, 10),\n",
        "# #         'C': np.logspace(-2, 1, 10),\n",
        "# #         'kernel': ['linear', 'poly', 'rbf', 'sigmoid']} \n",
        "# # model=svm.SVR()\n",
        "# # GSCV=GridSearchCV(model,params,cv=3,verbose=2)\n",
        "# # GSCV.fit(X_train, y_train)\n",
        "# # print(GSCV.best_params_)\n",
        "# # SVC_score=score_regression(GSCV)\n",
        "# # Neural network\n",
        "# params_nn={'hidden_layer_sizes': [(80,20,40,5), (75,30,50,10,3)], \n",
        "#         'activation': [ 'relu','logistic', 'tanh'], \n",
        "#         'solver': ['sgd', 'adam'], \n",
        "#         'alpha': np.logspace(-2,1,10)} \n",
        "\n",
        "# NN_model= MLPRegressor(max_iter=800)\n",
        "# GSCV_nn=GridSearchCV(NN_model,params_nn,cv=3,verbose=2)\n",
        "# GSCV_nn.fit(X_train, y_train)\n",
        "# print(GSCV_nn.best_params_)\n",
        "# NN_score=score_regression(GSCV_nn)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "0UafwTRQKwRA",
        "outputId": "c00cc273-7a0c-4476-8eca-8846e26e01ea"
      },
      "source": [
        "# df = processed_data.copy()\n",
        "# df.positionOrder = df.positionOrder.map(lambda x: 1 if x == 1.0 else 0)\n",
        "\n",
        "# #split train\n",
        "\n",
        "# train = df[df.year <2020]\n",
        "# X_train = train.drop(['Driver_name', 'positionOrder'], axis = 1)\n",
        "# y_train = train.positionOrder\n",
        "\n",
        "# scaler = StandardScaler()\n",
        "# X_train = pd.DataFrame(scaler.fit_transform(X_train), columns = X_train.columns)\n",
        "\n",
        "\n",
        "# # Logistic Regression\n",
        "\n",
        "# params_lr={'penalty': ['l1', 'l2'],\n",
        "#         'solver': ['saga', 'liblinear'],\n",
        "#         'C': np.logspace(-2,1,10)}\n",
        "# model=LogisticRegression()\n",
        "# GSCV=GridSearchCV(model,params_lr,cv=3,verbose=2)\n",
        "# GSCV.fit(X_train, y_train)\n",
        "# print(GSCV.best_params_)\n",
        "# Log_score=score_classification(GSCV)\n",
        "\n",
        "# # Random Forest Classifier\n",
        "\n",
        "# params={'criterion': ['gini', 'entropy'],\n",
        "#         'max_features': [0.8, 'auto', None],\n",
        "#         'max_depth': list(np.linspace(5, 55, 26)) + [None]}\n",
        "# model_ran=RandomForestClassifier()\n",
        "# GSCV_RFC=GridSearchCV(model_ran,params,cv=3,verbose=2)\n",
        "# GSCV_RFC.fit(X_train, y_train)\n",
        "# print(GSCV_RFC.best_params_)\n",
        "# RFC_score=score_classification(GSCV_RFC)\n",
        "# # Support Vector Machines\n",
        "\n",
        "# params={'gamma': np.logspace(-2, -1, 10),\n",
        "#         'C': np.logspace(-2, 1, 10),\n",
        "#         'kernel': ['linear', 'poly', 'rbf', 'sigmoid']} \n",
        "# model_svc = svm.SVC()\n",
        "# GSCV_SVC=GridSearchCV(model_svc,params,cv=3,verbose=1)\n",
        "# GSCV_SVC.fit(X_train, y_train)\n",
        "# print(GSCV_SVC.best_params_)\n",
        "# #SVC_score=score_classification(GSCV_SVC)\n",
        "\n",
        "# # Neural network\n",
        "\n",
        "# params_nn={'hidden_layer_sizes': [(80,20,40,5), (75,25,50,10)], \n",
        "#         'activation': [ 'logistic', 'tanh', 'relu'], \n",
        "#         'solver': ['sgd', 'adam'], \n",
        "#         'alpha': np.logspace(-2,1,10)} \n",
        "# NN_model= MLPClassifier(max_iter=800)\n",
        "# GSCV_nn=GridSearchCV(NN_model,params_nn,cv=3,verbose=2)\n",
        "# GSCV_nn.fit(X_train, y_train)\n",
        "# print(GSCV_nn.best_params_)\n",
        "# NN_score=score_regression(GSCV_nn)\n"
      ],
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Fitting 3 folds for each of 40 candidates, totalling 120 fits\n",
            "[CV] C=0.01, penalty=l1, solver=saga .................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] .................. C=0.01, penalty=l1, solver=saga, total=   0.3s\n",
            "[CV] C=0.01, penalty=l1, solver=saga .................................\n",
            "[CV] .................. C=0.01, penalty=l1, solver=saga, total=   0.1s\n",
            "[CV] C=0.01, penalty=l1, solver=saga .................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.3s remaining:    0.0s\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  \"the coef_ did not converge\", ConvergenceWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] .................. C=0.01, penalty=l1, solver=saga, total=   0.4s\n",
            "[CV] C=0.01, penalty=l1, solver=liblinear ............................\n",
            "[CV] ............. C=0.01, penalty=l1, solver=liblinear, total=   0.0s\n",
            "[CV] C=0.01, penalty=l1, solver=liblinear ............................\n",
            "[CV] ............. C=0.01, penalty=l1, solver=liblinear, total=   0.0s\n",
            "[CV] C=0.01, penalty=l1, solver=liblinear ............................\n",
            "[CV] ............. C=0.01, penalty=l1, solver=liblinear, total=   0.0s\n",
            "[CV] C=0.01, penalty=l2, solver=saga .................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  \"the coef_ did not converge\", ConvergenceWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] .................. C=0.01, penalty=l2, solver=saga, total=   0.3s\n",
            "[CV] C=0.01, penalty=l2, solver=saga .................................\n",
            "[CV] .................. C=0.01, penalty=l2, solver=saga, total=   0.1s\n",
            "[CV] C=0.01, penalty=l2, solver=saga .................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  \"the coef_ did not converge\", ConvergenceWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] .................. C=0.01, penalty=l2, solver=saga, total=   0.3s\n",
            "[CV] C=0.01, penalty=l2, solver=liblinear ............................\n",
            "[CV] ............. C=0.01, penalty=l2, solver=liblinear, total=   0.0s\n",
            "[CV] C=0.01, penalty=l2, solver=liblinear ............................\n",
            "[CV] ............. C=0.01, penalty=l2, solver=liblinear, total=   0.0s\n",
            "[CV] C=0.01, penalty=l2, solver=liblinear ............................\n",
            "[CV] ............. C=0.01, penalty=l2, solver=liblinear, total=   0.0s\n",
            "[CV] C=0.021544346900318832, penalty=l1, solver=saga .................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  \"the coef_ did not converge\", ConvergenceWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] .. C=0.021544346900318832, penalty=l1, solver=saga, total=   0.4s\n",
            "[CV] C=0.021544346900318832, penalty=l1, solver=saga .................\n",
            "[CV] .. C=0.021544346900318832, penalty=l1, solver=saga, total=   0.3s\n",
            "[CV] C=0.021544346900318832, penalty=l1, solver=saga .................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  \"the coef_ did not converge\", ConvergenceWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] .. C=0.021544346900318832, penalty=l1, solver=saga, total=   0.4s\n",
            "[CV] C=0.021544346900318832, penalty=l1, solver=liblinear ............\n",
            "[CV]  C=0.021544346900318832, penalty=l1, solver=liblinear, total=   0.0s\n",
            "[CV] C=0.021544346900318832, penalty=l1, solver=liblinear ............\n",
            "[CV]  C=0.021544346900318832, penalty=l1, solver=liblinear, total=   0.0s\n",
            "[CV] C=0.021544346900318832, penalty=l1, solver=liblinear ............\n",
            "[CV]  C=0.021544346900318832, penalty=l1, solver=liblinear, total=   0.0s\n",
            "[CV] C=0.021544346900318832, penalty=l2, solver=saga .................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  \"the coef_ did not converge\", ConvergenceWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] .. C=0.021544346900318832, penalty=l2, solver=saga, total=   0.3s\n",
            "[CV] C=0.021544346900318832, penalty=l2, solver=saga .................\n",
            "[CV] .. C=0.021544346900318832, penalty=l2, solver=saga, total=   0.2s\n",
            "[CV] C=0.021544346900318832, penalty=l2, solver=saga .................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  \"the coef_ did not converge\", ConvergenceWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] .. C=0.021544346900318832, penalty=l2, solver=saga, total=   0.3s\n",
            "[CV] C=0.021544346900318832, penalty=l2, solver=liblinear ............\n",
            "[CV]  C=0.021544346900318832, penalty=l2, solver=liblinear, total=   0.0s\n",
            "[CV] C=0.021544346900318832, penalty=l2, solver=liblinear ............\n",
            "[CV]  C=0.021544346900318832, penalty=l2, solver=liblinear, total=   0.0s\n",
            "[CV] C=0.021544346900318832, penalty=l2, solver=liblinear ............\n",
            "[CV]  C=0.021544346900318832, penalty=l2, solver=liblinear, total=   0.0s\n",
            "[CV] C=0.046415888336127774, penalty=l1, solver=saga .................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  \"the coef_ did not converge\", ConvergenceWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] .. C=0.046415888336127774, penalty=l1, solver=saga, total=   0.4s\n",
            "[CV] C=0.046415888336127774, penalty=l1, solver=saga .................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  \"the coef_ did not converge\", ConvergenceWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] .. C=0.046415888336127774, penalty=l1, solver=saga, total=   0.4s\n",
            "[CV] C=0.046415888336127774, penalty=l1, solver=saga .................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  \"the coef_ did not converge\", ConvergenceWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] .. C=0.046415888336127774, penalty=l1, solver=saga, total=   0.4s\n",
            "[CV] C=0.046415888336127774, penalty=l1, solver=liblinear ............\n",
            "[CV]  C=0.046415888336127774, penalty=l1, solver=liblinear, total=   0.0s\n",
            "[CV] C=0.046415888336127774, penalty=l1, solver=liblinear ............\n",
            "[CV]  C=0.046415888336127774, penalty=l1, solver=liblinear, total=   0.0s\n",
            "[CV] C=0.046415888336127774, penalty=l1, solver=liblinear ............\n",
            "[CV]  C=0.046415888336127774, penalty=l1, solver=liblinear, total=   0.0s\n",
            "[CV] C=0.046415888336127774, penalty=l2, solver=saga .................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  \"the coef_ did not converge\", ConvergenceWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] .. C=0.046415888336127774, penalty=l2, solver=saga, total=   0.3s\n",
            "[CV] C=0.046415888336127774, penalty=l2, solver=saga .................\n",
            "[CV] .. C=0.046415888336127774, penalty=l2, solver=saga, total=   0.3s\n",
            "[CV] C=0.046415888336127774, penalty=l2, solver=saga .................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_sag.py:330: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
            "  \"the coef_ did not converge\", ConvergenceWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "[CV] .. C=0.046415888336127774, penalty=l2, solver=saga, total=   0.3s\n",
            "[CV] C=0.046415888336127774, penalty=l2, solver=liblinear ............\n",
            "[CV]  C=0.046415888336127774, penalty=l2, solver=liblinear, total=   0.0s\n",
            "[CV] C=0.046415888336127774, penalty=l2, solver=liblinear ............\n",
            "[CV]  C=0.046415888336127774, penalty=l2, solver=liblinear, total=   0.0s\n",
            "[CV] C=0.046415888336127774, penalty=l2, solver=liblinear ............\n",
            "[CV]  C=0.046415888336127774, penalty=l2, solver=liblinear, total=   0.0s\n",
            "[CV] C=0.1, penalty=l1, solver=saga ..................................\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-91-64380a0a986c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mLogisticRegression\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0mGSCV\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mparams_lr\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m \u001b[0mGSCV\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mGSCV\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbest_params_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0mLog_score\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mscore_classification\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mGSCV\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    708\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    709\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 710\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    711\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    712\u001b[0m         \u001b[0;31m# For multi-metric evaluation, store the best_index_, best_params_ and\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1149\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1150\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1151\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1152\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params)\u001b[0m\n\u001b[1;32m    687\u001b[0m                                \u001b[0;32mfor\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    688\u001b[0m                                in product(candidate_params,\n\u001b[0;32m--> 689\u001b[0;31m                                           cv.split(X, y, groups)))\n\u001b[0m\u001b[1;32m    690\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    691\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1042\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1043\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1044\u001b[0;31m             \u001b[0;32mwhile\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1045\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1046\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    857\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    858\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 859\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    860\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    861\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    775\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    776\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 777\u001b[0;31m             \u001b[0mjob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    778\u001b[0m             \u001b[0;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    779\u001b[0m             \u001b[0;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    206\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m         \u001b[0;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 208\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    209\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    570\u001b[0m         \u001b[0;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    571\u001b[0m         \u001b[0;31m# arguments in memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 572\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    573\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    574\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    261\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    262\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 263\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    264\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__reduce__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    261\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    262\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 263\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    264\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__reduce__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36m_fit_and_score\u001b[0;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score, return_parameters, return_n_test_samples, return_times, return_estimator, error_score)\u001b[0m\n\u001b[1;32m    513\u001b[0m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    514\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 515\u001b[0;31m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    516\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    517\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m   1599\u001b[0m                       \u001b[0mpenalty\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mpenalty\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_squared_sum\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_squared_sum\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1600\u001b[0m                       sample_weight=sample_weight)\n\u001b[0;32m-> 1601\u001b[0;31m             for class_, warm_start_coef_ in zip(classes_, warm_start_coef))\n\u001b[0m\u001b[1;32m   1602\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1603\u001b[0m         \u001b[0mfold_coefs_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_iter_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mfold_coefs_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1039\u001b[0m             \u001b[0;31m# remaining jobs.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1040\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1041\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1042\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1043\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    857\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    858\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 859\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    860\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    861\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    775\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    776\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 777\u001b[0;31m             \u001b[0mjob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    778\u001b[0m             \u001b[0;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    779\u001b[0m             \u001b[0;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    206\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m         \u001b[0;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 208\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    209\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    570\u001b[0m         \u001b[0;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    571\u001b[0m         \u001b[0;31m# arguments in memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 572\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    573\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    574\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    261\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    262\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 263\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    264\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__reduce__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    261\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    262\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 263\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    264\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__reduce__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py\u001b[0m in \u001b[0;36m_logistic_regression_path\u001b[0;34m(X, y, pos_class, Cs, fit_intercept, max_iter, tol, verbose, solver, coef, class_weight, dual, penalty, intercept_scaling, multi_class, random_state, check_input, max_squared_sum, sample_weight, l1_ratio)\u001b[0m\n\u001b[1;32m    975\u001b[0m                 \u001b[0mbeta\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_iter\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtol\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    976\u001b[0m                 \u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_squared_sum\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwarm_start_sag\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 977\u001b[0;31m                 is_saga=(solver == 'saga'))\n\u001b[0m\u001b[1;32m    978\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    979\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_sag.py\u001b[0m in \u001b[0;36msag_solver\u001b[0;34m(X, y, sample_weight, loss, alpha, beta, max_iter, tol, verbose, random_state, check_input, max_squared_sum, warm_start_mem, is_saga)\u001b[0m\n\u001b[1;32m    324\u001b[0m                             \u001b[0mintercept_decay\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    325\u001b[0m                             \u001b[0mis_saga\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 326\u001b[0;31m                             verbose)\n\u001b[0m\u001b[1;32m    327\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    328\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mn_iter_\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mmax_iter\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gFK-TR9ZI5i4"
      },
      "source": [
        "# nn_params_class={'activation': 'relu', 'alpha': 2.154434690031882, 'hidden_layer_sizes': (75, 25, 50, 10), 'solver': 'sgd'}\n",
        "# svc_params_class={'C': 2.154434690031882, 'gamma': 0.016681005372000592, 'kernel': 'sigmoid'}\n",
        "# rf_params_class={'criterion': 'gini', 'max_depth': 9.0, 'max_features': 'auto'}\n",
        "# lr_params_class={'C': 0.21544346900318834, 'penalty': 'l1', 'solver': 'saga'}"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "trusted": true,
        "id": "o8XAXH0vKwRB"
      },
      "source": [
        "# df = processed_data.copy()\n",
        "# df.positionOrder = df.positionOrder.map(lambda x: 1 if x == 1.0 else 0)\n",
        "\n",
        "# #split train\n",
        "\n",
        "# train = df[df.year <2020]\n",
        "# X_train = train.drop(['Driver_name', 'positionOrder'], axis = 1)\n",
        "# y_train = train.positionOrder\n",
        "\n",
        "# scaler = StandardScaler()\n",
        "# X_train = pd.DataFrame(scaler.fit_transform(X_train), columns = X_train.columns)\n",
        "\n",
        "\n",
        "# # gridsearch dictionary\n",
        "\n",
        "# comparison_dict=defaultdict(list)\n",
        "\n",
        "# # Logistic Regression\n",
        "\n",
        "# params={'penalty': ['l1', 'l2'],\n",
        "#         'solver': ['saga', 'liblinear'],\n",
        "#         'C': np.logspace(-3,1,20)}\n",
        "# # comparison_dict=defaultdict(list)\n",
        "# for penalty in params['penalty']:\n",
        "#     for solver in params['solver']:\n",
        "#         for c in params['C']:\n",
        "#             model_params = (penalty, solver, c)\n",
        "#             model = LogisticRegression(penalty = penalty, solver = solver, C = c, max_iter = 10000)\n",
        "#             model.fit(X_train, y_train)\n",
        "            \n",
        "#             model_score = score_classification(model)\n",
        "            \n",
        "#             comparison_dict['model'].append('logistic_regression')\n",
        "#             comparison_dict['params'].append(model_params)\n",
        "#             comparison_dict['score'].append(model_score)\n",
        "\n",
        "# # Random Forest Classifier\n",
        "\n",
        "# params={'criterion': ['gini', 'entropy'],\n",
        "#         'max_features': [0.8, 'auto', None],\n",
        "#         'max_depth': list(np.linspace(5, 55, 26)) + [None]}\n",
        "\n",
        "# for criterion in params['criterion']:\n",
        "#     for max_features in params['max_features']:\n",
        "#         for max_depth in params['max_depth']:\n",
        "#             model_params = (criterion, max_features, max_depth)\n",
        "#             model = RandomForestClassifier(criterion = criterion, max_features = max_features, max_depth = max_depth)\n",
        "#             model.fit(X_train, y_train)\n",
        "            \n",
        "#             model_score = score_classification(model)\n",
        "            \n",
        "#             comparison_dict['model'].append('random_forest_classifier')\n",
        "#             comparison_dict['params'].append(model_params)\n",
        "#             comparison_dict['score'].append(model_score)\n",
        "\n",
        "# # Support Vector Machines\n",
        "\n",
        "# params={'gamma': np.logspace(-4, -1, 20),\n",
        "#         'C': np.logspace(-2, 1, 20),\n",
        "#         'kernel': ['linear', 'poly', 'rbf', 'sigmoid']} \n",
        "\n",
        "# for gamma in params['gamma']:\n",
        "#     for c in params['C']:\n",
        "#         for kernel in params['kernel']:\n",
        "#             model_params = (gamma, c, kernel)\n",
        "#             model = svm.SVC(probability = True, gamma = gamma, C = c, kernel = kernel )\n",
        "#             model.fit(X_train, y_train)\n",
        "            \n",
        "#             model_score = score_classification(model)\n",
        "            \n",
        "#             comparison_dict['model'].append('svm_classifier')\n",
        "#             comparison_dict['params'].append(model_params)\n",
        "#             comparison_dict['score'].append(model_score)\n",
        "\n",
        "# # Neural network\n",
        "\n",
        "# params={'hidden_layer_sizes': [(80,20,40,5), (75,25,50,10)], \n",
        "#         'activation': ['identity', 'logistic', 'tanh', 'relu'], \n",
        "#         'solver': ['lbfgs', 'sgd', 'adam'], \n",
        "#         'alpha': np.logspace(-4,2,20)} \n",
        "\n",
        "# for hidden_layer_sizes in params['hidden_layer_sizes']:\n",
        "#     for activation in params['activation']:\n",
        "#         for solver in params['solver']:\n",
        "#             for alpha in params['alpha']:\n",
        "#                 model_params = (hidden_layer_sizes, activation, solver, alpha )\n",
        "#                 model = MLPClassifier(hidden_layer_sizes = hidden_layer_sizes,activation = activation, solver = solver, alpha = alpha, random_state = 1)\n",
        "#                 model.fit(X_train, y_train)\n",
        "\n",
        "#                 model_score = score_classification(model)\n",
        "\n",
        "#                 comparison_dict['model'].append('neural_network_classifier')\n",
        "#                 comparison_dict['params'].append(model_params)\n",
        "#                 comparison_dict['score'].append(model_score)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "execution": {
          "iopub.status.busy": "2021-07-06T18:05:14.386836Z",
          "iopub.execute_input": "2021-07-06T18:05:14.387285Z",
          "iopub.status.idle": "2021-07-06T18:05:14.405102Z",
          "shell.execute_reply.started": "2021-07-06T18:05:14.387241Z",
          "shell.execute_reply": "2021-07-06T18:05:14.404093Z"
        },
        "trusted": true,
        "id": "tBm0J12AKwQ8"
      },
      "source": [
        "# df = processed_data.copy()\n",
        "\n",
        "# #train split\n",
        "\n",
        "# train = df[df.year <2020]\n",
        "# X_train = train.drop(['Driver_name', 'positionOrder'], axis = 1)\n",
        "# y_train = train.positionOrder\n",
        "\n",
        "# scaler = StandardScaler()\n",
        "# X_train = pd.DataFrame(scaler.fit_transform(X_train), columns = X_train.columns)\n",
        "\n",
        "  \n",
        "# # Linear Regression\n",
        "\n",
        "# params={'fit_intercept': ['True', 'False']}\n",
        "# comparison_dict=defaultdict(list)\n",
        "# for fit_intercept in params['fit_intercept']:\n",
        "#     model_params = (fit_intercept)\n",
        "#     model = LinearRegression(fit_intercept = fit_intercept)\n",
        "#     model.fit(X_train, y_train)\n",
        "            \n",
        "#     model_score = score_regression(model)\n",
        "            \n",
        "#     comparison_dict['model'].append('linear_regression')\n",
        "#     comparison_dict['params'].append(model_params)\n",
        "#     comparison_dict['score'].append(model_score)\n",
        "\n",
        "    \n",
        "# # Random Forest Regressor\n",
        "\n",
        "# params={'criterion': ['mse'],\n",
        "#         'max_features': [0.8, 'auto', None],\n",
        "#         'max_depth': list(np.linspace(5, 55, 26)) + [None]}\n",
        "\n",
        "# for criterion in params['criterion']:\n",
        "#     for max_features in params['max_features']:\n",
        "#         for max_depth in params['max_depth']:\n",
        "#             model_params = (criterion, max_features, max_depth)\n",
        "#             model = RandomForestRegressor(criterion = criterion,\n",
        "#                                           max_features = max_features, max_depth = max_depth, random_state = 1)\n",
        "#             model.fit(X_train, y_train)\n",
        "            \n",
        "#             model_score = score_regression(model)\n",
        "            \n",
        "#             comparison_dict['model'].append('random_forest_regressor')\n",
        "#             comparison_dict['params'].append(model_params)\n",
        "#             comparison_dict['score'].append(model_score)\n",
        "\n",
        "            \n",
        "# # Support Vector Machines\n",
        "\n",
        "# params={'gamma': np.logspace(-4, -1, 10),\n",
        "#         'C': np.logspace(-2, 1, 10),\n",
        "#         'kernel': ['linear', 'poly', 'rbf', 'sigmoid']} \n",
        "\n",
        "# for gamma in params['gamma']:\n",
        "#     for c in params['C']:\n",
        "#         for kernel in params['kernel']:\n",
        "#             model_params = (gamma, c, kernel)\n",
        "#             model = svm.SVR(gamma = gamma, C = c, kernel = kernel)\n",
        "#             model.fit(X_train, y_train)\n",
        "            \n",
        "#             model_score = score_regression(model)\n",
        "            \n",
        "#             comparison_dict['model'].append('svm_regressor')\n",
        "#             comparison_dict['params'].append(model_params)\n",
        "#             comparison_dict['score'].append(model_score)\n",
        "\n",
        "            \n",
        "# # Neural network\n",
        "\n",
        "# params={'hidden_layer_sizes': [(80,20,40,5), (75,30,50,10,3)], \n",
        "#         'activation': ['identity', 'relu','logistic', 'tanh',], \n",
        "#         'solver': ['lbfgs','sgd', 'adam'], \n",
        "#         'alpha': np.logspace(-4,1,20)} \n",
        "\n",
        "# for hidden_layer_sizes in params['hidden_layer_sizes']:\n",
        "#     for activation in params['activation']:\n",
        "#         for solver in params['solver']:\n",
        "#             for alpha in params['alpha']:\n",
        "#                 model_params = (hidden_layer_sizes, activation, solver, alpha )\n",
        "#                 model = MLPRegressor(hidden_layer_sizes = hidden_layer_sizes,\n",
        "#                                       activation = activation, solver = solver, alpha = alpha, random_state = 1)\n",
        "#                 model.fit(X_train, y_train)\n",
        "\n",
        "#                 model_score = score_regression(model)\n",
        "\n",
        "#                 comparison_dict['model'].append('nn_regressor')\n",
        "#                 comparison_dict['params'].append(model_params)\n",
        "#                 comparison_dict['score'].append(model_score)\n",
        "# pd.DataFrame(comparison_dict).groupby('model')['score'].max()"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}